@{
    ViewData["Title"] = "Home";
}
<div id="homeApp" v-clock>
    <template>
        <div class="left_box" :class="{left_box_is_nollapse:isCollapse }">
            <h1 class="logo_box" :class="{is_not_nollapse:!isCollapse , is_collapse:isCollapse}" title="vue admin">
            </h1>
            <el-menu ref="menu" :default-active="menuDefaultActive" class="el-menu-vertical-demo" v-on:select="handleSelect" :collapse="isCollapse" :unique-opened="true">
                <template v-for="item in menuArr">
                    <template v-if="item.show">
                        <el-submenu v-if="hasShowItem(item.children).length > 0" :index="item.key">
                            <template slot="title">
                                <i class="font-size18" :class="item.icon"></i>
                                <span slot="title">{{item.title}}</span>
                            </template>
                            <template v-for="child in hasShowItem(item.children)">
                                <template v-if="child.show">
                                    <el-submenu v-if="hasShowItem(child.children).length > 0 " :index="child.key">
                                        <template slot="title">
                                            <i class="font-size18" :class="child.icon"></i>
                                            <span slot="title">{{child.title}}</span>
                                        </template>
                                        <template v-for="c in hasShowItem(child.children)">
                                            <el-menu-item :index="c.key" v-if="c.show">
                                                <i class="font-size18" :class="c.icon"></i>
                                                <span slot="title">{{c.title}}</span>
                                            </el-menu-item>
                                        </template>
                                    </el-submenu>
                                    <el-menu-item v-else :index="child.key">
                                        <i class="font-size18" :class="child.icon"></i>
                                        <span slot="title">{{child.title}}</span>
                                    </el-menu-item>
                                </template>
                            </template>
                        </el-submenu>
                        <el-menu-item v-else :index="item.key">
                            <i class="font-size18" :class="item.icon"></i>
                            <span slot="title">{{item.title}}</span>
                        </el-menu-item>
                    </template>
                </template>
            </el-menu>
        </div>
        <div class="right_box" :class="{right_box_full:isCollapse}">
            <div class="nav_top">
                <span class="left_item">
                    <el-button title="展开/收起左侧导航" v-on:click="isCollapse = !isCollapse" size="small">
                        <i class="layui_icon" :class="{layui_icon_spread_left:isCollapse,layui_icon_shrink_right:!isCollapse}"></i>
                    </el-button>
                </span>
                <span class="right_item">
                    <el-dropdown>
                        <span class="el-dropdown-link">
                            Supalle<i class="el-icon-arrow-down el-icon--right"></i>
                        </span>
                        <el-dropdown-menu slot="dropdown">
                            <el-dropdown-item icon="el-icon-fa-user"> 个人中心</el-dropdown-item>
                            <el-dropdown-item icon="el-icon-fa-key" v-on:click.native="editPwd"> 修改密码</el-dropdown-item>
                            <el-dropdown-item icon="el-icon-fa-sign-out" v-on:click.native="signOut" divided> 登出</el-dropdown-item>
                        </el-dropdown-menu>
                    </el-dropdown>
                </span>
                <span class="right_item">
                    <el-button type="text"><i class="el-icon-bell"></i></el-button>
                </span>
            </div>
            <div class="right_body">
                <el-tabs v-model="tabActive" type="card" v-on:tab-remove="tabClose">
                    <el-tab-pane v-for="(item, index) in tabItems" :key="item.name" :label="item.title" :name="item.name" :closable="!item.notClosable">
                        <span slot="label"><i :class="[item.icon]"></i>&nbsp;{{item.title}}</span>
                        <iframe :id="'iframe_'+item.name" :name="'iframe_name_'+item.name" class="xsl_tab_iframe" :src="item.url"></iframe>
                    </el-tab-pane>
                </el-tabs>
            </div>
            <transition name="fade">
                <div class="right_shade" v-show="!isCollapse && gobalParams.windowIsXs" v-on:click="isCollapse = !isCollapse"></div>
            </transition>
        </div>
        <!-- tabs右键菜单 -->
        <transition name="fade">
            <ul v-show="tabsPopper.isShow" class="el-dropdown-menu el-popper" id="dropdown-menu-20190222161055"
                style="transform-origin: center top 0px; z-index: 99999; position: absolute;"
                :style="{top: tabsPopper.top, left: tabsPopper.left}" x-placement="bottom-end">
                <li tabindex="-1" class="el-dropdown-menu__item" v-on:click="tabRefresh" style="text-align: center;">
                    <i class="el-icon-refresh" style="font-weight: bold;color: #67C23A;"></i>&nbsp;刷新
                </li>
                <li tabindex="-1" v-show="tabsPopper.id !== homeTab.name" class="el-dropdown-menu__item" v-on:click="tabPosition" style="text-align: center;">
                    <i class="el-icon-location" style="font-weight: bold;color: #409EFF;"></i>&nbsp;定位
                </li>
                <li tabindex="-1" v-show="tabsPopper.id !== homeTab.name" class="el-dropdown-menu__item" v-on:click="tabClose(tabsPopper.id)" style="text-align: center;">
                    <i class="el-icon-close" style="font-weight: bold;color: #F56C6C;"></i>&nbsp;关闭
                </li>
                <li tabindex="-1" class="el-dropdown-menu__item" v-on:click="tabCloseRight">关闭右侧</li>
                <li tabindex="-1" v-show="tabsPopper.id !== homeTab.name" class="el-dropdown-menu__item" v-on:click="tabCloseAll">关闭全部</li>
            </ul>
        </transition>
    </template>
    <template>
        <el-dialog title="修改密码" width="35%" :visible.sync="editPwdFormVisible">
            <el-form :model="editPwdForm" ref="editPwdForm" :rules="editPwdRules" label-position="right" label-width="80px">
                <el-form-item label="原始密码" prop="password">
                    <el-input type="password" v-model="editPwdForm.password" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="密码" prop="newPassword">
                    <el-input type="password" v-model="editPwdForm.newPassword" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="确认密码" prop="checkNewPassword">
                    <el-input type="password" v-model="editPwdForm.checkNewPassword" autocomplete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button v-on:click="resetEditPwdForm('editPwdForm')">重 置</el-button>
                <el-button type="primary" v-on:click="submitEditPwdForm('editPwdForm')" v-bind:loading="editPwdLoading">确 定</el-button>
            </div>
        </el-dialog>
    </template>
</div>
@section script {
    <script>
        new Vue({
            el: '#homeApp',
            data() {
                var validatePass2 = (rule, value, callback) => {
                    if (value === '') {
                        callback(new Error('请再次输入密码'));
                    } else if (value !== this.editPwdForm.newPassword) {
                        callback(new Error('两次输入密码不一致!'));
                    } else {
                        callback();
                    }
                };
                return {
                    editPwdFormVisible: false,
                    editPwdLoading: false,
                    editPwdForm: {
                        password: null,
                        newPassword: null,
                        checkNewPassword: null
                    },
                    editPwdRules: {
                        password: [
                            { required: true, message: '请输入原始密码', trigger: 'blur' },
                            { min: 6, max: 15, message: '长度在 6 到 15 个字符' }
                        ],
                        newPassword: [
                            { required: true, message: '请输入新密码', trigger: 'blur' },
                            { min: 6, max: 15, message: '长度在 6 到 15 个字符' }
                        ],
                        checkNewPassword: [
                            { required: true, message: '请输入确认密码', trigger: 'blur' },
                            { min: 6, max: 15, message: '长度在 6 到 15 个字符' },
                            { validator: validatePass2, trigger: 'blur' }
                        ],
                    },
                    isCollapse: false,
                    gobalParams: gobal.params,
                    loadding: {},
                    menuDefaultActive: 'useDocTemplate',
                    menuArr: [],
                    //menuArr: [
                    //    {
                    //        key: 'base_manage',
                    //        title: '基础管理',
                    //        show: true,
                    //        //url: '',
                    //        icon: 'el-icon-fa-cubes',
                    //        children: [
                    //            {
                    //                key: 'icon_list',
                    //                title: 'Icon列表',
                    //                show: true,
                    //                url: '/Basis/Icon',
                    //                icon: 'el-icon-fa-list',
                    //            }
                    //        ]
                    //    },
                    //    {
                    //        key: 'log_manage',
                    //        title: '日志管理',
                    //        show: true,
                    //        //url: '',
                    //        icon: 'el-icon-fa-file-text',
                    //        children: [
                    //            {
                    //                key: 'log_list',
                    //                title: '日志列表',
                    //                show: true,
                    //                url: '/Log/Index',
                    //                icon: 'el-icon-fa-list'
                    //            }
                    //        ]
                    //    },
                    //    {
                    //        key: 'permission_manage',
                    //        title: '权限管理',
                    //        show: true,
                    //        //url: '',
                    //        icon: 'el-icon-setting',
                    //        children: [
                    //            {
                    //                key: 'account_list',
                    //                title: '账号列表',
                    //                show: true,
                    //                url: '/Account/Index',
                    //                icon: 'el-icon-fa-list',
                    //            },
                    //            {
                    //                key: 'role_list',
                    //                title: '角色列表',
                    //                show: true,
                    //                url: '/Role/Index',
                    //                icon: 'el-icon-fa-list',
                    //            },
                    //            {
                    //                key: 'menu_list',
                    //                title: '菜单列表',
                    //                show: true,
                    //                url: '/Menu/Index',
                    //                icon: 'el-icon-fa-list',
                    //            }
                    //        ]
                    //    },
                    //    {
                    //        key: 'gerenzhongxin',
                    //        title: '个人中心',
                    //        show: true,
                    //        url: 'http://supalle.gitee.io/sal/layout.html',
                    //        icon: 'layui_icon layui_icon_friends'
                    //    }
                    //],
                    tabItems: [homeTab],
                    tabActive: homeTab.key,
                    tabsPopper: {
                        id: homeTab.key,
                        isShow: false,
                        top: '0px',
                        left: '0px'
                    },
                    tabParams: {}
                }
            },
            created: function () {
                var _this = this;
                // 重写api
                // 1.提示框
                // type：成功(success),警告(warning),错误(error)
                api.showMsg = function (msg, type = null) {
                    if (type == null) {
                        _this.$message({ showClose: true, message: msg });
                    } else {
                        _this.$message({ showClose: true, message: msg, type: type });
                    }
                };
                api.showMsgByHtml = function (title, html) {
                    _this.$notify({
                        title: title,
                        dangerouslyUseHTMLString: true,
                        message: html
                    });
                };
                // 2.弹出窗----需要固定自定义的,先不做统一接口
                // 3.子页面参数
                api.getTabParams = function (tabKey) {
                    //子页面的Key传进来
                    return _this.tabParams[tabKey];
                };
                api.setTabParams = function (tabKey, params) {
                    //子页面的Key和params对象传进来
                    _this.tabParams[tabKey] = params;
                };
                // 4.tabs操作
                api.jumpTab = function (key, title, url, icon) {
                    var activeName = _this.tabActive;
                    if (key !== activeName) {
                        var tabs = _this.tabItems.filter(function (tab) {
                            return tab.name === key;
                        });

                        if (tabs.length > 0) {
                            activeName = key;
                        } else {
                            _this.tabItems.push({
                                title: title,
                                name: key,
                                url: url,
                                icon: icon
                            });
                            activeName = key;
                        }
                        _this.tabActive = activeName;
                    }
                };
                api.closeTab = function (tab) {
                    if (tab) {
                        var cType = typeof tab;
                        var targetName;
                        if (cType === 'string') {
                            targetName = tab;
                        } else if (tab.name) {
                            targetName = tab.name;
                        } else {
                            return;
                        }
                        var tabs = _this.tabItems;
                        var activeName = _this.tabActive;
                        if (activeName === targetName) {
                            tabs.forEach((tab, index) => {
                                if (tab.name === targetName) {
                                    var nextTab = tabs[index + 1] || tabs[index - 1];
                                    if (nextTab) {
                                        activeName = nextTab.name;
                                    }
                                }
                            });
                        }

                        _this.tabActive = activeName;
                        _this.tabItems = tabs.filter(tab => tab.name !== targetName);
                    }
                };
                // 5.全屏loading遮罩
                api.openLoading = function (time) {
                    _this.loading = _this.$loading({
                        lock: true,
                        text: 'Loading',
                        spinner: 'el-icon-loading',
                        background: 'rgba(0, 0, 0, 0.7)'
                    });
                    if (time)
                        setTimeout(function () {
                            _this.loading.close();
                        }, time);
                };
                api.closeLoading = function () {
                    _this.loading.close();
                };
                // 6.检查是否拥有资源，本质上是从menuArr中查找出来
                api.cr = function (key) { // Check Resource 的简写
                    return _this.findMenuObj(key, _this.menuArr);
                };
                api.getCurrTabRes = function (iframWindow) { // 获取当前tab页对应的资源
                    var name = iframWindow.name;
                    if (name) {
                        // iframe_name_xxxx
                        var key = name.substring(12);
                        return _this.findTab(key, _this.tabItems);
                    }
                    return false;
                };
            },
            watch: {},
            updated: function () {
                var _this = this;
                _this.$nextTick(function () {
                    _this.bindTabTilesOncontextmenu();
                });
            },
            methods: {
                hasShowItem: function (arr) {
                    if (arr && arr.length > 0) {
                        return arr.filter(function (e) {
                            return e.show;
                        });
                    }
                    return [];
                },
                findMenuObj: function (key, arr) {
                    if (arr && arr.length > 0) {
                        for (var i = 0; i < arr.length; i++) {
                            if (key === arr[i].key) {
                                return arr[i];
                            } else {
                                var result = this.findMenuObj(key, arr[i].children);
                                if (result !== false) {
                                    return result;
                                }
                            }
                        }
                    }
                    return false;
                },
                findTab: function (name, arr) {
                    if (arr && arr.length > 0) {
                        for (var i = 0; i < arr.length; i++) {
                            if (name === arr[i].name) {
                                return arr[i];
                            }
                        }
                    }
                    return false;
                },
                findMenuParent: function (key, arr) {
                    if (arr && arr.length > 0) {
                        for (var i = 0; i < arr.length; i++) {
                            if (key === arr[i].key) {
                                return true;
                            } else {
                                var result = this.findMenuParent(key, arr[i].children);
                                if (result === true) {
                                    return arr[i];
                                } else if (result !== false) {
                                    return result;
                                }
                            }
                        }
                    }
                    return false;
                },
                handleSelect: function (key) {
                    var curr = this.findMenuObj(key, this.menuArr);
                    // console.log(curr);
                    if (curr !== false) {
                        api.jumpTab(curr.key, curr.title, curr.url, curr.icon);
                    }
                },
                bindTabTilesOncontextmenu: function () {
                    // 绑定tabs右键菜单
                    var _this = this;
                    var tabTiles = gobal.utils.getDoms(/^tab-.*/);
                    document.onmousedown = function (e) {
                        if (e.button === 2 || e.button === 0 || e.button === 1) {
                            _this.tabsPopper.isShow = false;
                        }
                    };
                    for (var i = 0; i < tabTiles.length; i++) {
                        var obj = tabTiles[i];
                        obj.oncontextmenu = function (e) {
                            _this.tabsPopper.isShow = true;
                            _this.tabsPopper.id = this.getAttribute('id').replace("tab-", "");
                            _this.tabsPopper.top = (e.y - 6) + 'px';
                            _this.tabsPopper.left = ((_this.gobalParams.windowFullWidth - e.x) <
                                110 ? _this.gobalParams.windowFullWidth - 110 :
                                e.x - 6) + 'px';
                            // console.log(_this.tabsPopper);
                            e.preventDefault();
                        };
                        obj.onblur = function () {
                            _this.tabsPopper.isShow = false;
                        }
                    }
                },
                tabRefresh: function () {
                    this.tabActive = this.tabsPopper.id;
                    document.getElementById('iframe_' + this.tabsPopper.id)
                        .contentWindow.location.reload(true);
                },
                tabClose: function (targetName) {
                    api.tabCloseOrCallBack(this.findTab(targetName, this.tabItems));
                },
                tabCloseRight: function () {
                    if (this.tabsPopper.id === homeTab.key) {
                        this.tabCloseAll();
                    } else {
                        //this.tabActive = this.tabsPopper.id;
                        var tabs = this.tabItems,
                            items = [],
                            size = tabs.length;
                        while (--size >= 0) { // 倒叙
                            if (tabs[size].name === this.tabsPopper.id) {
                                break;
                            }
                            items.push(tabs[size]);
                        }
                        var chain = new SalChain(items, function (tab, index, chain) {
                            api.tabCloseOrCallBack(tab, chain);
                            // chain.next();
                        });
                        chain.next();
                        //this.tabItems = newTabs;
                    }
                },
                tabCloseAll: function () {
                    var tabs = this.tabItems,
                        items = [],
                        size = tabs.length;
                    while (--size > 0) { // 倒叙
                        items.push(tabs[size]);
                    }
                    var chain = new SalChain(items, function (tab, index, chain) {
                        api.tabCloseOrCallBack(tab, chain);
                        // chain.next();
                    });
                    chain.next();
                    // this.tabItems = [homeTab];
                    // this.tabActive = homeTab.key;
                },
                tabPosition: function () {
                    if (this.menuDefaultActive === this.tabsPopper.id) {
                        var curr = this.findMenuParent(this.tabsPopper.id, this.menuArr);
                        if (curr !== false) {
                            this.$refs.menu.open(curr.key);
                        }
                    } else {
                        this.menuDefaultActive = this.tabsPopper.id;
                    }
                },
                getAccountMenu: function () {
                    var self = this;
                    $.get("/Account/GetAccountMenu", function (res) {
                        self.menuArr = res;
                    });
                },
                signOut: function () {
                    $.get("/Login/SignOut", function () {
                        window.location.href = "/Login/Index";
                    });
                },
                editPwd: function () {
                    this.editPwdFormVisible = true;
                    this.resetEditPwdForm("editPwdForm");
                },
                resetEditPwdForm: function (formName) {
                    if (this.$refs[formName] !== undefined) {
                        this.$refs[formName].resetFields();
                    }
                },
                submitEditPwdForm: function (formName) {
                    this.$refs[formName].validate((valid) => {
                        if (valid) {
                            var self = this;
                            self.editPwdLoading = true;
                            $.post("/Home/ResetPassword", self.editPwdForm, function (res) {
                                if (res.code == 0) {
                                    api.showMsg("修改密码成功...", "success");
                                    self.editPwdLoading = false;
                                    window.location.href = "/Home/Index";
                                } else {
                                    api.showMsg("修改密码失败，详情请查看错误日志...", "error");
                                }
                            });
                        } else {
                            console.log('error submit!!');
                            return false;
                        }
                    });
                },
            },
            mounted: function () {
                this.getAccountMenu();
                //this.$nextTick(function () {
                //    // Code that will run only after the
                //    // entire view has been rendered
                //    //api.jumpTab('useDocTemplate','样板示例','useDocTemplate.html','layui_icon layui_icon_template');
                //});
            }
        });
    </script>
}
